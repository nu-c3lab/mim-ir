'''
This file is part of Mim.
Mim is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.
Mim is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with Mim.
If not, see <https://www.gnu.org/licenses/>.
'''
"""
Exceptions

A set of Mim specific exceptions/warnings.

April 20, 2021
Authors: C3 Lab
"""

from typing import List

class DecompositionPredictionError(Exception):
    def __init__(self):
        msg = "No decomposition generated by the model."
        super().__init__(msg)

class DecompositionReferenceError(Exception):
    def __init__(self):
        msg = "Reference token in parsed decomposition refers to non-existent / future step."
        super().__init__(msg)

class DecompositionLeafError(Warning):
    def __init__(self):
        msg = "A step is unused in the parsed decomposition."
        super().__init__(msg)

class DecompositionTypeIOError(Warning):
    def __init__(self):
        msg = "A step in the parsed decomposition is being used by another step which cannot accept it."
        super().__init__(msg)

class DecompositionSeparatorError(Exception):
    def __init__(self):
        msg = "A special token was predicted that doesn't adhere to standard formalism."
        super().__init__(msg)

class DecompositionTypeParseError(Exception):
    def __init__(self):
        msg = "Unable to parse prediction into the component step type."
        super().__init__(msg)

class InternetConnectionTimeoutError(Exception):
    def __init__(self):
        msg = "Unable to connect to the Internet while inserting triples into the knowledge graph."
        super().__init__(msg)

class ArticleDoesNotExistError(Exception):
    def __init__(self, article_name: str):
        self.article_name = article_name
        msg = "Unable to find an article with the given name: {}.".format(self.article_name)
        super().__init__(msg)

class MultipleRelationshipsFoundWarning(Warning):
    def __init__(self, relationships: List[str]):
        self.relationships = relationships
        msg = "More than one relationship was found: {}.".format(self.relationships)
        super().__init__(msg)

class NoRelationshipFoundWarning(Warning):
    def __init__(self):
        msg = "No relationship was found."
        super().__init__(msg)

class SourceFormatError(Exception):
    def __init__(self):
        msg = "Unable to properly use object from source."
        super().__init__(msg)

class SourceParseWarning(Warning):
    def __init__(self):
        msg = "Unable to properly parse the document from the source."
        super().__init__(msg)

class UnexpectedOperationArgsError(Exception):
    def __init__(self, op_args: List[str]):
        self.op_args = op_args
        msg = "The format of the operator arguments '{}' is unexpected.".format(self.op_args)
        super().__init__(msg)

class UnhandledOperationTypeError(Exception):
    def __init__(self, op_type: str):
        self.op_type = op_type
        msg = "The operation type '{}' is not a currently supported operation.".format(self.op_type)
        super().__init__(msg)

class UnhandledSubOperationTypeError(Exception):
    def __init__(self, op_subtype: str):
        self.op_subtype = op_subtype
        msg = "The sub-operation type '{}' is not currently supported.".format(self.op_subtype)
        super().__init__(msg)

class MissingPreviousStepDataError(Exception):
    def __init__(self):
        msg = "Required dataframe from a previous step is not available."
        super().__init__(msg)

class DataframeMergeError(Exception):
    def __init__(self):
        msg = "Unable to merge the two dataframes."
        super().__init__(msg)

class MissingRelationshipError(Exception):
    def __init__(self):
        msg = "No canonical relationship is present."
        super().__init__(msg)

class MalformedInputError(Exception):
    def __init__(self, input: str):
        self.input = input
        msg = "Input '{}' is malformed and needs to be cleaned.".format(self.input)
        super().__init__(msg)

class MissingEntitiesError(Exception):
    def __init__(self):
        msg = "No entities or entity class is present."
        super().__init__(msg)

class MissingDocsError(Exception):
    def __init__(self):
        msg = "Unable to find any relevant documents."
        super().__init__(msg)

class ModelNotLoadedError(Exception):
    def __init__(self):
        msg = "Unable to load the model."
        super().__init__(msg)

class MissingColumnError(Exception):
    def __init__(self, column_name: str = None):
        self.column_name = column_name
        msg = "A required column '{}' is missing from the dataframe.".format(self.column_name)
        super().__init__(msg)
